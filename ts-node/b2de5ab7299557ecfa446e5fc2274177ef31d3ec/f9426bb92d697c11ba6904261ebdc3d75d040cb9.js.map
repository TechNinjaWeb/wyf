{"version":3,"file":"/Users/techninja/Documents/Docs/Business/WaleYaFoto/site/wyf-app/src/index.ts","sources":["/Users/techninja/Documents/Docs/Business/WaleYaFoto/site/wyf-app/src/index.ts"],"names":[],"mappings":"AAAA,wFAAwF;AACxF,2BAA2B;AAC3B,yCAAyC;AACzC,yDAAyD;AACzD,yCAAyC;AACzC,oEAAoE;AACpE,qEAAqE;AACrE,2BAA2B;AAC3B,wFAAwF;;;AAExF,mBAAmB;AACnB,iCAAmC;AACnC,2BAA6B;AAC7B,2BAA6B;AAC7B,wCAA0C;AAE1C,6CAA6C;AAC7C,4BAA0B;AAC1B,kCAAgC;AAChC,4DAA+E;AAE/E,yBAAkC;AAClC,iEAAiE;AACjE,qGAAiG;AAEjG,SAAS;AACT,IAAM,IAAI,GAAG,OAAO,CAAC,GAAG,CAAC,IAAI,IAAI,MAAM,CAAC;AACxC,IAAM,GAAG,GAAG,OAAO,EAAE,CAAC;AACtB,IAAM,MAAM,GAAG,IAAI,CAAC,YAAY,CAAC,GAAG,CAAC,CAAC;AAEtC,wBAAwB;AACxB,GAAG,CAAC,GAAG,CAAC,UAAU,CAAC,IAAI,EAAE,CAAC,CAAC;AAC3B,GAAG,CAAC,GAAG,CAAC,UAAU,CAAC,UAAU,CAAC,EAAE,QAAQ,EAAE,KAAK,EAAE,CAAC,CAAC,CAAC;AAEpD,4BAA4B;AAC5B,GAAG,CAAC,GAAG,CAAC,OAAO,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE,SAAS,CAAC,CAAC,CAAC,CAAC;AAEzD,oCAAoC;AACpC,IAAI,QAAQ,GAAG,iBAAY,CAAC,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE,MAAM,EAAE,IAAI,EAAE,YAAY,CAAC,CAAC,CAAC,QAAQ,EAAE,CAAC;AAEzF,8CAA8C;AAC9C,GAAG,CAAC,MAAM,CAAC,MAAM,EAAE,UAAC,CAAC,EAAE,OAAO,EAAE,QAAQ;IACvC,4DAA4D;IAC5D,IAAM,IAAI,GAAG,EAAE,QAAQ,EAAE,QAAQ,EAAE,GAAG,EAAE,OAAO,CAAC,GAAG,CAAC,GAAG,EAAE,CAAC;IAC1D,8DAA8D;IAC9D,qCAAmB,CAAC,sDAAwB,EAAE,IAAI,CAAC;SACjD,IAAI,CAAC,UAAA,IAAI,IAAI,OAAA,QAAQ,CAAC,IAAI,EAAE,IAAI,CAAC,EAApB,CAAoB,CAAC,CAAC;AACtC,CAAC,CAAC,CAAC;AACH,GAAG,CAAC,GAAG,CAAC,aAAa,EAAE,MAAM,CAAC,CAAC;AAC/B,GAAG,CAAC,GAAG,CAAC,OAAO,EAAE,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE,SAAS,CAAC,CAAC,CAAC;AAClD,GAAG,CAAC,GAAG,CAAC,OAAO,CAAC,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,SAAS,EAAE,SAAS,CAAC,CAAC,CAAC,CAAC;AAC5D,kCAAkC;AAClC,GAAG,CAAC,MAAM,CAAC,aAAa,CAAC,CAAC;AAC1B,kDAAkD;AAClD,GAAG,CAAC,GAAG,CAAC,MAAM,EAAE,IAAI,CAAC,CAAC;AACtB,iBAAiB;AACjB,GAAG,CAAC,GAAG,CAAC,KAAK,EAAE,OAAO,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE,MAAM,CAAC,CAAC,CAAC,CAAC;AAC7D,YAAY;AACZ,GAAG,CAAC,GAAG,CAAC,GAAG,EAAE,UAAC,GAAG,EAAE,GAAG;IACpB,GAAG,CAAC,MAAM,CAAC,OAAO,EAAE,EAAE,GAAG,KAAA,EAAE,CAAC,CAAC;AAC/B,CAAC,CAAC,CAAC;AACH;;;GAGG;AACH,MAAM,CAAC,MAAM,CAAC,IAAI,EAAE,cAAM,OAAA,OAAO,CAAC,GAAG,CAAC,8BAA4B,IAAM,CAAC,EAA/C,CAA+C,CAAC,CAAC","sourcesContent":["////////////////////////////////////////////////////////////////////////////////////////\n//\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t  //\n//\tFilename: \t\tindex.ts\t\t\t\t\t\t\t\t\t\t\t\t\t\t  //\n//\tAuthor: \t\tTech Ninja <4umninja@gmail.com>\t\t\t\t\t\t\t\t\t  //\n//\tDate: \t\t\tMay 21, 2017\t\t\t\t\t\t\t\t\t\t\t\t\t  //\n//\tDescription: \tStart point for this nodejs server applet\t\t\t\t\t\t  //\n//\tCredits: \t\t1. https://www.youtube.com/watch?v=lncsmB5yfzE\t\t\t\t\t  //\n//\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t  //\n////////////////////////////////////////////////////////////////////////////////////////\n\n// Get dependencies\nimport * as express from 'express';\nimport * as path from 'path';\nimport * as http from 'http';\nimport * as bodyParser from 'body-parser';\n\n// Dependencies for angular as credited by #1\nimport 'reflect-metadata';\nimport 'zone.js/dist/zone-node';\nimport { platformServer, renderModuleFactory } from '@angular/platform-server';\nimport { enableProdMode } from '@angular/core';\nimport { readFileSync } from 'fs';\n// Angular module factory dependency gets created upon 'ng build'\nimport { AppServerModuleNgFactory } from '../dist/ngfactory/src/app/app-server.module.ngfactory';\n\n// Config\nconst port = process.env.PORT || '3000';\nconst app = express();\nconst server = http.createServer(app);\n\n// Parsers for POST data\napp.use(bodyParser.json());\napp.use(bodyParser.urlencoded({ extended: false }));\n\n// Point static path to dist\napp.use(express.static(path.join(__dirname, '../dist')));\n\n// SEO Template body: Angular 2+ Fix\nlet template = readFileSync(path.join(__dirname, 'dist', '..', 'index.html')).toString();\n\n// Set App Engine and Distribution Directories\napp.engine('html', (_, options, callback) => {\n\t// Define the options that the renderModuleFactory will use \n\tconst opts = { document: template, url: options.req.url };\n\t// Load the angular module then execute the engine's callback \n\trenderModuleFactory(AppServerModuleNgFactory, opts)\n\t\t.then(html => callback(null, html));\n});\napp.set('view engine', 'html');\napp.set('views', path.join(__dirname, '../dist'));\napp.use(express.static(path.resolve(__dirname, '../dist')));\n// Enable trust proxy (heroku fix)\napp.enable('trust proxy');\n// Get port from environment and store in Express.\napp.set('port', port);\n// Catch any file\napp.get('*.*', express.static(path.join(__dirname, 'dist')));\n// Catch All\napp.get('*', (req, res) => {\n  res.render('index', { req });\n});\n/**\n * Create HTTP server.\n * Listen on provided port, on all network interfaces.\n */\nserver.listen(port, () => console.log(`App running on localhost:${port}`));"]}